/*
	Author: Tristan Britt
	This file 'grid.hpp' contains the includes
	and prototypes for the class Grid. This
	class is generated by a series of parameters,
	the total number of which can vary. Its main
	purpose is to create some object which will
	be used by other functions to generate all 
	possible permutations of discrete points 
	in the total parameter space.
*/

#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cstdarg>
#include <boost/lexical_cast.hpp>

#ifndef GRIDHEADERDEF
#define GRIDHEADERDEF
using namespace std;

class Grid 
{
private:
	vector<vector<double>> axes_pts;
	vector<string> names;
	//vector<vector<double>> nodes;
	unsigned int dims;

public:
	Grid(unsigned int DIM, ...);
	//unsigned int size();
	unsigned int dim();
	vector<string> get_names();
	vector<vector<double>> get_axes_pts();
	vector<double> operator[](int i);


protected:
	//void set_points(vector<vector<double> >& arr);


};
#endif

//int at(int x, int y, int z) {
//	return data[z * width * height + y * width + x];
//}


